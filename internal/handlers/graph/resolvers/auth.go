package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"github.com/Da-max/todo-go/internal/core/domain"
	"github.com/go-chi/jwtauth/v5"

	"github.com/Da-max/todo-go/internal/handlers/graph/generated"
	"github.com/Da-max/todo-go/internal/handlers/graph/model"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Identifier) (*model.Tokens, error) {
	var token, err = r.AuthService.Login(input.Username, input.Password)
	if err != nil {
		return nil, err
	}

	return model.ToTokensModel(token), nil
}

// SignUp is the resolver for the signUp field.
func (r *mutationResolver) SignUp(ctx context.Context, input model.NewUser) (*model.User, error) {
	var user, err = r.UserService.Create(input.Username, input.Email, input.Password, false, false)

	if err != nil {
		return nil, err
	}

	return model.ToUserModel(user), nil
}

// ConfirmAccount is the resolver for the confirmAccount field.
func (r *mutationResolver) ConfirmAccount(ctx context.Context, input *model.ConfirmIdentifier) (*model.Confirm, error) {
	panic(fmt.Errorf("not implemented: ConfirmAccount - confirmAccount"))
}

// UpdateAccount is the resolver for the updateAccount field.
func (r *mutationResolver) UpdateAccount(ctx context.Context, input model.UpdateUser) (*model.User, error) {
	var (
		token            = ctx.Value(jwtauth.TokenCtxKey).(*domain.Token)
		currentUser, err = r.AuthService.GetCurrentUser(token)
		user             *domain.User
	)

	if err != nil {
		return nil, err
	}

	user, err = r.UserService.Update(currentUser.ID, *input.Username, *input.Email, currentUser.Password, currentUser.IsActive, currentUser.IsAdmin, token)

	if err != nil {
		return nil, err
	}

	return model.ToUserModel(user), nil

}

// ChangePassword is the resolver for the changePassword field.
func (r *mutationResolver) ChangePassword(ctx context.Context, input *model.ChangePassword) (*model.ChangePasswordConfirm, error) {
	panic(fmt.Errorf("not implemented: ChangePassword - changePassword"))
}

// DeleteAccount is the resolver for the deleteAccount field.
func (r *mutationResolver) DeleteAccount(ctx context.Context) (*model.DeleteAccount, error) {
	panic(fmt.Errorf("not implemented: DeleteAccount - deleteAccount"))
}

// RequestConfirmAccount is the resolver for the requestConfirmAccount field.
func (r *mutationResolver) RequestConfirmAccount(ctx context.Context) (*model.RequestConfirmAccount, error) {
	panic(fmt.Errorf("not implemented: RequestConfirmAccount - requestConfirmAccount"))
}

// RequestResetPassword is the resolver for the requestResetPassword field.
func (r *mutationResolver) RequestResetPassword(ctx context.Context, input model.RequestPasswordResetIdentifier) (*model.RequestResetPassword, error) {
	panic(fmt.Errorf("not implemented: RequestResetPassword - requestResetPassword"))
}

// ResetPassword is the resolver for the resetPassword field.
func (r *mutationResolver) ResetPassword(ctx context.Context, input model.ResetPasswordIdentifier) (*model.Confirm, error) {
	panic(fmt.Errorf("not implemented: ResetPassword - resetPassword"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// CurrentUser is the resolver for the currentUser field.
func (r *queryResolver) CurrentUser(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CurrentUser - currentUser"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
