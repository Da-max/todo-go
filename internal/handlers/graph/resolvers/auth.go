package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"

	"github.com/Da-max/todo-go/internal/core/domain"
	"github.com/Da-max/todo-go/internal/handlers/graph/generated"
	"github.com/Da-max/todo-go/internal/handlers/graph/model"
	"github.com/Da-max/todo-go/internal/utils/auth"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Identifier) (*model.Tokens, error) {
	var token, err = r.AuthService.Login(input.Username, input.Password)
	if err != nil {
		return nil, err
	}

	return model.ToTokensModel(token), nil
}

// SignUp is the resolver for the signUp field.
func (r *mutationResolver) SignUp(ctx context.Context, input model.NewUser) (*model.User, error) {
	var user, err = r.UserService.Create(input.Username, input.Email, input.Password, false, false)

	if err != nil {
		return nil, err
	}

	return model.ToUserModel(user), nil
}

// ConfirmAccount is the resolver for the confirmAccount field.
func (r *mutationResolver) ConfirmAccount(ctx context.Context, input *model.ConfirmIdentifier) (*model.Confirm, error) {
	var user, err = r.AuthService.GetCurrentUser(ctx.Value(auth.TokenCtxKey).(*domain.Token))

	if err != nil {
		return nil, err
	}

	if _, err := r.UserService.ConfirmAccount(user.ID, model.ToTokenDomain(input.Token)); err != nil {
		return nil, err
	}

	return &model.Confirm{Ok: true}, nil
}

// UpdateAccount is the resolver for the updateAccount field.
func (r *mutationResolver) UpdateAccount(ctx context.Context, input model.UpdateUser) (*model.User, error) {
	var token, err = auth.GetTokenCtx(ctx)
	if err != nil {
		return nil, err
	}

	currentUser, err := r.AuthService.GetCurrentUser(token)
	user := &domain.User{}

	if err != nil {
		return nil, err
	}

	user, err = r.UserService.Update(currentUser.ID, *input.Username, *input.Email, currentUser.Password, currentUser.IsActive, currentUser.IsAdmin, token)

	if err != nil {
		return nil, err
	}

	return model.ToUserModel(user), nil
}

// ChangePassword is the resolver for the changePassword field.
func (r *mutationResolver) ChangePassword(ctx context.Context, input *model.ChangePassword) (*model.ChangePasswordConfirm, error) {
	var (
		token     = ctx.Value(auth.TokenCtxKey).(*domain.Token)
		user, err = r.AuthService.GetCurrentUser(token)
	)

	if err != nil {
		return nil, err
	}

	if _, err := r.AuthService.ChangePassword(user.ID, input.OldPassword, input.Password, token); err != nil {
		return nil, err
	}

	return &model.ChangePasswordConfirm{Ok: true}, nil
}

// DeleteAccount is the resolver for the deleteAccount field.
func (r *mutationResolver) DeleteAccount(ctx context.Context) (*model.DeleteAccount, error) {
	var (
		token     = ctx.Value(auth.TokenCtxKey).(*domain.Token)
		user, err = r.AuthService.GetCurrentUser(token)
	)

	if err != nil {
		return nil, err
	}

	if err := r.UserService.Remove(user.ID, token); err != nil {
		return nil, err
	}

	return &model.DeleteAccount{Ok: true}, nil
}

// RequestConfirmAccount is the resolver for the requestConfirmAccount field.
func (r *mutationResolver) RequestConfirmAccount(ctx context.Context) (*model.RequestConfirmAccount, error) {
	var (
		token     = ctx.Value(auth.TokenCtxKey).(*domain.Token)
		user, err = r.AuthService.GetCurrentUser(token)
	)

	if err != nil {
		return nil, err
	}

	if _, err := r.UserService.RequestConfirmAccount(user.ID, token); err != nil {
		return nil, err
	}

	return &model.RequestConfirmAccount{Ok: true}, nil
}

// RequestResetPassword is the resolver for the requestResetPassword field.
func (r *mutationResolver) RequestResetPassword(ctx context.Context, input model.RequestPasswordResetIdentifier) (*model.RequestResetPassword, error) {
	res, err := r.AuthService.RequestResetPassword(input.Email)

	if err != nil {
		return nil, err
	}

	return &model.RequestResetPassword{Ok: res}, nil
}

// ResetPassword is the resolver for the resetPassword field.
func (r *mutationResolver) ResetPassword(ctx context.Context, input model.ResetPasswordIdentifier) (*model.Confirm, error) {
	panic(fmt.Errorf("not implemented: ResetPassword - resetPassword"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	var (
		token      = ctx.Value(auth.TokenCtxKey).(*domain.Token)
		users, err = r.UserService.GetAll(token)
		results    []*model.User
	)

	if err != nil {
		return nil, err
	}

	for _, user := range users {
		results = append(results, model.ToUserModel(user))
	}

	return results, nil
}

// CurrentUser is the resolver for the currentUser field.
func (r *queryResolver) CurrentUser(ctx context.Context) (*model.User, error) {
	var token, err = auth.GetTokenCtx(ctx)

	if err != nil {
		return nil, err
	}

	currentUser, err := r.AuthService.GetCurrentUser(token)

	if err != nil {
		return nil, err
	}

	return model.ToUserModel(currentUser), nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
